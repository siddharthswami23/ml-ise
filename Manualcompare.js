const bcrypt = require('bcryptjs');
const { ManualbcryptHash } = require('./EksBlowfish');

/**
 * Compare Manual vs AI hashes
 * @param {string} password - Original password
 * @param {string} salt - Salt to use
 * @param {number} cost - Cost factor
 * @param {string} aiHash - Hash generated by AI (Gemini)
 * @returns {Object} Comparison result
 */
async function compareHashes(password, salt, cost, aiHash) {
    const result = {};

    // ---------- Manual Hash ----------
    const manualHash = ManualbcryptHash(password, salt, cost);
    result.manualHash = manualHash;
    result.aiHash = aiHash;

    // ---------- Correctness ----------
    result.correctness = {
        manual_vs_bcrypt: manualHash === bcrypt.hashSync(password, salt),
        manual_vs_ai: aiHash === manualHash,
    };

    // ---------- Brute-force Simulation ----------
    const commonPasswords = ["123456", "password", "mysecret", "admin", "letmein"];
    const bruteResults = { manual: null, ai: null };

    for (let pw of commonPasswords) {
        if (!bruteResults.manual && ManualbcryptHash(pw, salt, cost) === manualHash) bruteResults.manual = pw;
        if (!bruteResults.ai && aiHash && ManualbcryptHash(pw, salt, cost) === aiHash) bruteResults.ai = pw;
    }
    result.bruteForce = bruteResults;

    // ---------- Collision Test ----------
    result.collision = {
        manual: ManualbcryptHash(password + "1", salt, cost) === manualHash ? "❌ Collision" : "✅ No collision",
        ai: aiHash && ManualbcryptHash(password + "1", salt, cost) === aiHash ? "❌ Collision" : "✅ No collision",
    };

    // ---------- Scoring ----------
    const scores = { manual: 0, ai: 0 };

    scores.manual += result.correctness.manual_vs_bcrypt ? 10 : 5;
    scores.ai += result.correctness.manual_vs_ai ? 10 : 5;

    scores.manual += bruteResults.manual ? 5 : 10;
    scores.ai += bruteResults.ai ? 5 : 10;

    scores.manual += result.collision.manual.includes("No") ? 10 : 5;
    scores.ai += result.collision.ai.includes("No") ? 10 : 5;

    result.scores = scores;
    result.winner = scores.manual >= scores.ai ? "Manual Hash is better 🏆" : "AI Hash is better 🏆";

    return result;
}

module.exports = { compareHashes };
